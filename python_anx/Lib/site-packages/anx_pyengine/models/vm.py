import ipaddress
from dataclasses import field
from typing import List, Optional

from dataclasses_json import config, dataclass_json
from pydantic.dataclasses import dataclass

from anx_pyengine.models.location import Location

from .util import PydanticConfig, ipaddr_to_json_encoder, json_to_ipaddr_decoder


@dataclass_json
@dataclass(config=PydanticConfig)
class VMInfo:
    name: str
    custom_name: Optional[str]
    identifier: str
    guest_os: str
    status: str
    ram: int
    cpu: int
    cpu_clock_rate: int
    cores: int
    disks: int
    disk_info: List[dict]
    network: List[dict]
    version_tools: str
    guest_tools_status: str
    location: Location
    template_id: str
    resource_salesperson: Optional[str] = None


@dataclass_json
@dataclass
class VMTemplate:
    id: str
    name: str
    bit: str
    build: str
    params: dict
    template_type: str


@dataclass_json
@dataclass
class DiskType:
    id: str
    storage_type: str
    bandwidth: int
    iops: int
    latency: int
    latence: int


@dataclass_json
@dataclass
class Progress:
    identifier: str
    queued: bool
    progress: int
    vm_identifier: Optional[str]
    errors: List[str]


@dataclass_json
@dataclass(config=PydanticConfig)
class VM:
    identifier: str
    name: str
    location: Location
    os_name: str
    os_family: str
    tags: str
    resource_managed_status: Optional[str] = None
    resource_customer_identifier: Optional[str] = None
    resource_customer_name: Optional[str] = None
    resource_customer_number: Optional[str] = None
    resource_reseller_identifier: Optional[str] = None
    resource_reseller_name: Optional[str] = None
    resource_reseller_number: Optional[str] = None
    resource_salesperson: Optional[str] = None
    ip_v4_primary: Optional[ipaddress._BaseNetwork] = field(
        default=None,
        metadata=config(encoder=ipaddr_to_json_encoder, decoder=json_to_ipaddr_decoder),
    )
    ip_v6_primary: Optional[ipaddress._BaseNetwork] = field(
        default=None,
        metadata=config(encoder=ipaddr_to_json_encoder, decoder=json_to_ipaddr_decoder),
    )
