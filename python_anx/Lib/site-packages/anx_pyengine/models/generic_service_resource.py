from typing import List, Optional

from dataclasses_json import dataclass_json
from pydantic.dataclasses import dataclass


@dataclass_json
@dataclass
class State:
    id: str
    text: Optional[str] = None
    type: Optional[int] = None

    @staticmethod
    def encoder(obj):
        """
        Returns an Engine-compatible representation of a state for inclusion in POST and PUT requests,
        where the Engine expects only an identifier, not an object
        """
        if obj:
            return obj.id
        else:
            return None


@dataclass_json
@dataclass
class AutomationRule:
    name: str
    identifier: str


@dataclass_json
@dataclass
class GenericServiceResource:
    identifier: Optional[str] = None
    reseller_identifier: Optional[str] = None
    customer_identifier: Optional[str] = None
    automation_rules: Optional[List[AutomationRule]] = None

    @staticmethod
    def get_path():
        raise NotImplementedError

    @staticmethod
    def encoder(obj):
        """
        Returns an Engine-compatible representation of GS resource attributes for inclusion in POST and PUT requests,
        where the Engine expects only an identifier, not an object
        """
        if obj:
            return obj.identifier
        else:
            return None
