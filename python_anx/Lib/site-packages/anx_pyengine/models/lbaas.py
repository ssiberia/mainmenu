from dataclasses import field
from typing import Optional

from dataclasses_json import config, dataclass_json
from pydantic.dataclasses import dataclass

from anx_pyengine.models.generic_service_resource import GenericServiceResource, State

ROUTE_PREFIX = "LBaaS"


@dataclass_json
@dataclass
class LoadBalancer(GenericServiceResource):
    @staticmethod
    def get_path():
        return f"/{ROUTE_PREFIX}/v1/loadbalancer.json"

    name: Optional[str] = None
    state: Optional[State] = field(
        metadata=config(encoder=State.encoder), default=State(id=3)
    )
    ip_address: Optional[str] = None


@dataclass_json
@dataclass
class Backend(GenericServiceResource):
    @staticmethod
    def get_path():
        return f"/{ROUTE_PREFIX}/v1/backend.json"

    name: Optional[str] = None
    state: Optional[State] = field(
        metadata=config(encoder=State.encoder),
        default=State(id=4),
    )
    enable: Optional[bool] = True
    load_balancer: Optional[LoadBalancer] = field(
        metadata=config(encoder=GenericServiceResource.encoder),
        default=None,
    )
    health_check: Optional[str] = '"httpchk": { "method": "GET", "uri": "/" }'
    mode: Optional[str] = "http"
    server_timeout: Optional[int] = 300000


@dataclass_json
@dataclass
class BackendServer(GenericServiceResource):
    @staticmethod
    def get_path():
        return f"/{ROUTE_PREFIX}/v1/server.json"

    name: Optional[str] = None
    state: Optional[State] = field(
        metadata=config(encoder=State.encoder), default=State(id=4)
    )
    enable: Optional[bool] = True
    load_balancer: Optional[LoadBalancer] = field(
        metadata=config(encoder=GenericServiceResource.encoder),
        default=None,
    )
    backend: Optional[Backend] = field(
        metadata=config(encoder=GenericServiceResource.encoder),
        default=None,
    )
    ip: Optional[str] = None
    port: Optional[int] = 80
    check: Optional[str] = "enabled"


@dataclass_json
@dataclass
class Frontend(GenericServiceResource):
    @staticmethod
    def get_path():
        return f"/{ROUTE_PREFIX}/v1/frontend.json"

    name: Optional[str] = None
    state: Optional[State] = field(
        metadata=config(encoder=State.encoder), default=State(id=4)
    )
    enable: Optional[bool] = True
    load_balancer: Optional[LoadBalancer] = field(
        metadata=config(encoder=GenericServiceResource.encoder),
        default=None,
    )
    default_backend: Optional[Backend] = field(
        metadata=config(encoder=GenericServiceResource.encoder),
        default=None,
    )
    mode: Optional[str] = "http"
    client_timeout: Optional[str] = 300000


@dataclass_json
@dataclass
class FrontendBind(GenericServiceResource):
    @staticmethod
    def get_path():
        return f"/{ROUTE_PREFIX}/v1/bind.json"

    name: Optional[str] = None
    state: Optional[State] = field(
        metadata=config(encoder=State.encoder), default=State(id=4)
    )
    enable: Optional[bool] = True
    frontend: Optional[Frontend] = field(
        metadata=config(encoder=GenericServiceResource.encoder),
        default=None,
    )
    address: Optional[str] = None
    port: Optional[int] = 80
    ssl: Optional[bool] = False
