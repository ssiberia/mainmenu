import asyncio
import datetime
import logging

from .engine import AbstractANXEngineAPI
from .models.location import Location
from .models.organization import Organization
from .models.vlan import VLAN, VLANRole

logger = logging.getLogger(__name__)


class EngineVLAN(AbstractANXEngineAPI):
    def get(self, identifier: str) -> VLAN:
        """
        Get VLAN by identifier
        Args:
            identifier: vlan idientifier hash
        Returns:
            VLAN object
        """
        return asyncio.run(self._async_get(identifier))

    def search(self, search: str, force: bool = False) -> list:
        """
        Search VLANs by name

        Args:
            search: The string to search for
        Returns:
            A list of VLAN objects matching the query
            None if the search yielded > 50 results and ANXEngine.full_search = False
        """
        return asyncio.run(self._async_search(search, force))

    async def _async_search(self, search: str, force: bool = False) -> list:
        params = {"search": search}
        data = await self.engine._api_search("/ipam/v1/vlan.json", params=params)
        if not data:
            return None

        vlans = await self._async_abstract_search(data)

        return vlans

    async def _async_get(self, identifier: str) -> VLAN:
        data = (await self.engine._api_get(f"/ipam/v1/vlan.json/{identifier}"))[0]
        vlan_role = VLANRole.from_dict(data["role"])
        created = datetime.datetime.strptime(data["created"], "%d.%m.%Y, %H:%M")
        updated = datetime.datetime.strptime(data["created"], "%d.%m.%Y, %H:%M")
        vlan = VLAN(
            identifier=data["identifier"],
            name=data["name"],
            description_customer=data["description_customer"],
            description_internal=data["description_internal"],
            ticket=data["ticket"],
            created=created,
            updated=updated,
            public_id=data["public_id"],
            role=vlan_role,
            status=data["status"],
            status_text=data["status_text"],
        )

        return vlan

    def create(
        self,
        location: Location,
        ticket: str,
        description: str,
        customer: Organization,
        managed_status: int = None,
        vm_provisioning: bool = True,
        description_customer: str = "",
    ) -> dict:
        """
        Create a new SCND VLAN
        Args:
            location: location object of the site the vlan should be created at
            ticket: internal ticket reference
            description: ATS ticket number
            vm_provisioning: enable VM provisioning (default=True)
            description_customer: description towards customer
            customer: a organization object
            managed_status: int (default=None) 4 = managed, 7 = semi-managed, 10 = unmanaged, 16 = unspecified
        Returns:
            A dict with information about the created VLAN
        """
        post_data = {
            "location": location.identifier,
            "ticket": ticket,
            "description": description,
            "vm_provisioning": vm_provisioning,
            "description_customer": description_customer,
            "customer_identifier": customer.identifier,
            "managed_status": managed_status,
        }
        data = self.engine._api_post(f"/ipam/v1/vlan/scnd.json", post_data=post_data)
        logger.info(f"created vlan {data['name']}: {data['identifier']}")
        return data
