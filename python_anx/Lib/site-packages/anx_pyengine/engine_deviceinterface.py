import asyncio
import ipaddress
import logging

from .engine import AbstractANXEngineAPI
from .models.deviceinterface import DeviceInterface

logger = logging.getLogger(__name__)


class EngineDeviceInterface(AbstractANXEngineAPI):
    def get(self, identifier: str) -> DeviceInterface:
        """
        Get a DeviceInterface object by identifier.
        Args:
            identifier: the devices identifier
        Returns:
            A DeviceInterface object
        """
        return asyncio.run(self._async_get(identifier))

    async def _async_get(self, identifier: str) -> DeviceInterface:
        data = (
            await self.engine._api_get(
                f"/config-management/v1/deviceinterface.json/{identifier}"
            )
        )[0]

        # sometimes the address field is abused to also accomodate the prefix-length (i.e. for irbs on ex3300)
        if data["ipv4_address"] and "/" in data["ipv4_address"]:
            data["ipv4_address"] = data["ipv4_address"].split("/")[0]
        if data["ipv6_address"] and "/" in data["ipv6_address"]:
            data["ipv6_address"] = data["ipv6_address"].split("/")[0]

        try:
            return DeviceInterface(
                identifier=data["identifier"],
                name=data["name"],
                ipv4_address=ipaddress.ip_address(data["ipv4_address"])
                if data["ipv4_address"]
                else None,
                ipv6_address=ipaddress.ip_address(data["ipv6_address"])
                if data["ipv6_address"]
                else None,
                device_identifier=data["device"]["identifier"],
                device_hostname=data["device"]["hostname_full"],
            )
        except TypeError:
            logger.error(f"Error parsing data for DeviceInterface {identifier}.")
