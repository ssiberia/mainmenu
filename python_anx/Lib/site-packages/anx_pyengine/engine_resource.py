import logging

from anx_pyengine.engine import AbstractANXEngineAPI

logger = logging.getLogger(__name__)


class EngineResource(AbstractANXEngineAPI):
    def update(
        self,
        resource_identifier: str,
        reseller_identifier: str = None,
        customer_identifier: str = None,
        managed_status: str = None,
        confirmed: bool = None,
    ):
        """
        Update attributes of a resource
        Args:
            resource_identifier: the identifier of the resource to update
            reseller_identifier: the identifier of the reseller it belongs to (Optional)
            customer_identifier: the identifier of the customer it belongs to (Optional)
            managed_status: one of "unmanaged", "managed", "semi-managed" or "unspecified" (Optional)
            confirmed: whether the resource is confirmed (Optional)
        Returns:
            A dict containing details of the updated resource
        Raises:
            A ValueError if managed_status is not one of the 4 choices
        """

        if managed_status not in [
            None,
            "unmanaged",
            "managed",
            "semi-managed",
            "unspecified",
        ]:
            raise ValueError(
                f"'{managed_status}' is not a valid managed_status choice."
            )

        # To avoid putting empty strings (which would erase the attributes value),
        # we check that each possible attribute was explicitly set.
        put_data = {}
        if reseller_identifier is not None:
            put_data["reseller_identifier"] = reseller_identifier
        if customer_identifier is not None:
            put_data["customer_identifier"] = customer_identifier
        if managed_status is not None:
            put_data["managed_status"] = managed_status
        if confirmed is not None:
            put_data["confirmed"] = confirmed

        data = self.engine._api_put(
            f"/core/v1/resource.json/{resource_identifier}",
            put_data=put_data,
        )
        logger.info(f"Updated resource {resource_identifier}")
        return data
