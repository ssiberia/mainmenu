import asyncio

from .engine import AbstractANXEngineAPI
from .models.organization import Organization


class EngineOrganization(AbstractANXEngineAPI):
    def get(self, organization_identifier: str) -> Organization:
        """
        Get Organization by identifier
        Args:
            organization_identifier: The org uuid
        Returns:
            An Organization object
        """
        return asyncio.run(self._async_get(organization_identifier))

    def search(self, customer_id: int, force: bool = False) -> list:
        """
        Search organization by customer_id
        Args:
            customer_id: The customer id
        Returns:
            a list of customers matching the query, empty if No customers match
            None if the search yielded > 50 results and ANXEngine.full_search = False
        """
        return asyncio.run(self._async_search(customer_id, force))

    async def _async_get(self, organization_identifier: str) -> Organization:
        data = (
            await self.engine._api_get(
                f"/core/v1/organization.json/{organization_identifier}"
            )
        )[0]
        organization = Organization.from_dict(data)

        return organization

    async def _async_search(self, customer_id: int, force: bool = False) -> list:
        params = {"query": customer_id}
        data = await self.engine._api_search(
            "/core/v1/organization/search.json", params=params
        )
        if not data:
            return None

        orgs = await self._async_abstract_search(data)
        return orgs
