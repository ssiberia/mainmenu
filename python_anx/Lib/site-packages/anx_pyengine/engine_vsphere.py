import asyncio

from .engine import AbstractANXEngineAPI
from .models.location import Location
from .models.vm import DiskType, Progress, VMTemplate


class EngineVSphere(AbstractANXEngineAPI):
    def get_vm_templates(self, location: Location, template_type: str = "templates"):
        """
        Get the available VM templates at a location
        Params:
            location: Location object
            template_type: templates or from_scratch
        """
        return asyncio.run(self._async_get_vm_templates(location, template_type))

    async def _async_get_vm_templates(
        self, location: Location, template_type: str = "templates"
    ):
        data = await self.engine._api_get(
            f"/vsphere/v1/provisioning/templates.json/{location.identifier}/{template_type}"
        )
        return_templates = []
        for template in data:
            template["template_type"] = template_type
            return_templates.append(VMTemplate(**template))
        return return_templates

    def get_disk_types(self, location: Location) -> list:
        """
        Get the available Disk types at a location
        Params:
            location: the location to query for
        Returns:
            list of DiskTypes
        """
        return asyncio.run(self._async_get_disk_types(location))

    async def _async_get_disk_types(self, location: Location) -> list:
        data = await self.engine._api_get(
            f"/vsphere/v1/provisioning/disk_type.json/{location.identifier}"
        )
        return_disk_types = []
        for disk_type in data:
            return_disk_types.append(DiskType(**disk_type))
        return return_disk_types

    def get_progress(self, progress_identifier: str) -> Progress:
        """
        Get a provisioning task Progress object
        Params:
            progress_identifier: the identifier of the progress object
        Returns:
            a Progress object containing information about the tasks progression
        """
        return asyncio.run(self._async_get_progress(progress_identifier))

    async def _async_get_progress(self, progress_identifier: str) -> Progress:
        data = (
            await self.engine._api_get(
                f"/vsphere/v1/provisioning/progress.json/{progress_identifier}"
            )
        )[0]
        return Progress.from_dict(data)
