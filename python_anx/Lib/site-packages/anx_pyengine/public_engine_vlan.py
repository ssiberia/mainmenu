import asyncio
import logging
from typing import Optional

from .engine import AbstractANXEngineAPI
from .models.location import Location
from .models.public_vlan import PublicVLAN

logger = logging.getLogger(__name__)


class PublicEngineVLAN(AbstractANXEngineAPI):
    def get(self, vlan_identifier: str) -> PublicVLAN:
        """
        Get VLAN by identifier from the Public Engine API
        Args:
            vlan_identifier: the vlan's identifier
        Returns:
            A PublicVLAN object
        """
        return asyncio.run(self._async_get(vlan_identifier))

    def search(self, search: str) -> list:
        """
        Search VLANs by name via the Public Engine API
        Args:
            search: The string to search for
        Returns:
            A list of VLAN objects matching the query
        """
        return asyncio.run(self._async_search(search))

    async def _async_search(self, search: str) -> Optional[list]:
        params = {"search": search}
        data = await self.engine._api_search("/vlan/v1/vlan.json", params=params)
        if not data:
            return None

        vlans = await self._async_abstract_search(data)
        return vlans

    async def _async_get(self, vlan_identifier: str) -> PublicVLAN:
        data = (await self.engine._api_get(f"/vlan/v1/vlan.json/{vlan_identifier}"))[0]
        return PublicVLAN.from_dict(data)

    def create(
        self,
        location: Location,
        organization_identifier: str = "",
        vm_provisioning: bool = True,
        description_customer: str = "",
    ) -> dict:
        """
        Create a new VLAN via the Public Engine API
        Args:
            location: location object of the site the vlan should be created at
            vm_provisioning: enable VM provisioning (default=True)
            description_customer: description towards customer
            organization_identifier: the organization's identifier (a reseller's customer)
        Returns:
            A dict with information about the created VLAN
        """
        post_data = {
            "location": location.identifier,
            "vm_provisioning": vm_provisioning,
            "description_customer": description_customer,
            "organization": organization_identifier,
        }
        data = self.engine._api_post(f"/vlan/v1/vlan.json", post_data=post_data)
        logger.info(f"Created VLAN {data['name']} on public API: {data['identifier']}")
        return data

    def delete(self, vlan_identifier: str) -> dict:
        """
        Request the deletion of a VLAN via the Public Engine API
        Args:
            vlan_identifier: The vlan's identifier
        Returns:
            A dict with some information about the deletion request
        """
        data = self.engine._api_delete(f"/vlan/v1/vlan.json/{vlan_identifier}")
        logger.info(
            f"Requested deletion of VLAN with identifier {vlan_identifier} via public API"
        )
        return data
