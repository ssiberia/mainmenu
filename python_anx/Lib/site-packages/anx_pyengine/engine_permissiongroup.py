import asyncio
import logging
from typing import List

from anx_pyengine.engine import AbstractANXEngineAPI
from anx_pyengine.models.permissiongroup import Permission

logger = logging.getLogger(__name__)


class EnginePermissionGroup(AbstractANXEngineAPI):
    def get_permissions(self, organization_identifier: str = None) -> List[Permission]:
        """
        Get all available Permissions
        Params:
            organization_identifier: the identifier of an organization in which to get the permissions (optional)
        Returns:
            list of Permissions
        """
        return asyncio.run(self._async_get_permissions(organization_identifier))

    async def _async_get_permissions(
        self, organization_identifier: str = None
    ) -> List[Permission]:
        params = {}
        if organization_identifier is not None:
            params["organization_identifier"] = organization_identifier
        data = await self.engine._api_get(
            f"/core/v1/permissiongroup/permissions.json", params=params
        )
        return [Permission(**permission) for permission in data]

    def create(
        self,
        name: str,
        comment: str,
        permissions: List[str] = None,
        organization_identifier: str = "",
        visible: bool = True,
    ) -> dict:
        """
        Create a new PermissionGroup
        Params:
            name: the (unique) name of the PermissionGroup
            comment: a description of the PermissionGroup
            permissions: a list of permission identifiers of the Permissions which are to be grouped (optional)
            organization_identifier: the identifier of the organization the PermissionGroup belongs to (optional)
            visible: whether the PermissionGroup shall be visible to the organization, reseller only (default=True)
        Returns:
            A dict containing the identifier of the created PermissionGroup and other details
        """

        post_data = {
            "name": name,
            "comment": comment,
            "organization_identifier": organization_identifier,
            "visible": visible,
        }
        if permissions is not None:
            post_data["permissions"] = permissions

        data = self.engine._api_post(
            f"/core/v1/permissiongroup.json", post_data=post_data
        )
        logger.info(f"Created PermissionGroup {name}, id: {data['identifier']}")
        return data

    def delete(self, permission_group_identifier: str) -> dict:
        """
        Request the deletion of a Permission Group
        Args:
            permission_group_identifier: The permission group's identifier
        Returns:
            A dict with some information about the deletion request
        """
        data = self.engine._api_delete(
            f"/core/v1/permissiongroup.json/{permission_group_identifier}"
        )
        logger.info(
            f"Requested deletion of permission group with identifier {permission_group_identifier}"
        )
        return data
