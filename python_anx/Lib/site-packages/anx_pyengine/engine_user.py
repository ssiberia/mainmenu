import asyncio
import datetime
import logging
from typing import List

from .engine import AbstractANXEngineAPI
from .models.user import User

logger = logging.getLogger(__name__)


class EngineUser(AbstractANXEngineAPI):
    def get(self, user_identifier: str) -> User:
        """
        Get a User by their identifier
        Params:
            user_identifier: the users' identifier
        Returns:
            user object
        """
        return asyncio.run(self._async_get_by_identifier(user_identifier))

    async def _async_get_by_identifier(self, user_identifier: str) -> User:
        data = (await self.engine._api_get(f"/core/v1/user.json/{user_identifier}"))[0]
        data["created_at"] = datetime.datetime.fromisoformat(data["created_at"])
        return User.from_dict(data)

    def get_user_types(self) -> List[str]:
        """
        Get the available User types
        Returns:
            list of User types
        """
        return asyncio.run(self._async_get_user_types())

    async def _async_get_user_types(self) -> List[str]:
        data = await self.engine._api_get(f"/core/v1/user/types.json")
        return data

    def create(
        self,
        last_name: str,
        user_type: str = "user",
        first_name: str = "",
        active: bool = True,
        permission_groups: List[str] = None,
        organization_identifier: str = "",
    ) -> dict:
        """
        Create a User
        Params:
            last_name: the User's last name
            user_type: one of the available user types, as returned via get_user_types (default='user')
            first_name: the User's first name (optional)
            active: if the created User account is active (default=True)
            permission_groups: list of permission group identifiers (optional)
            organization_identifier: the organization the User is attached to
                                     if the type is a form of service user, this is required
        Returns:
            a dict with information about the created user
        Raises:
            AttributeError: if the type is not available on the Engine endpoint used,
                            or a required parameter is missing for the specified User type
        """
        if user_type not in self.get_user_types():
            raise AttributeError

        if (
            user_type in ["service_user", "hidden_service_user"]
            and not organization_identifier
        ):
            raise AttributeError

        post_data = {
            "last_name": last_name,
            "type": user_type,
            "first_name": first_name,
            "active": active,
            "permission_groups": permission_groups,
            "organization_identifier": organization_identifier,
        }

        data = self.engine._api_post(
            f"/core/v1/user.json",
            post_data=post_data,
        )
        logger.info(f"Created User {first_name} {last_name}, id: {data['identifier']}")
        return data

    def delete(self, user_identifier: str) -> dict:
        """
        Request the deletion of a User
        Args:
            user_identifier: The user's identifier
        Returns:
            A dict with some information about the deletion request
        """
        data = self.engine._api_delete(f"/core/v1/user.json/{user_identifier}")
        logger.info(f"Requested deletion of user with identifier {user_identifier}")
        return data
