import logging
from typing import List

from anx_pyengine.engine import AbstractANXEngineAPI

logger = logging.getLogger(__name__)


class EngineTeam(AbstractANXEngineAPI):
    def create(
        self,
        name: str,
        user_identifiers: List[str] = None,
        permission_group_identifiers: List[str] = None,
        resource_pool_identifiers: List[str] = None,
        organization_identifier: str = None,
        visible: bool = True,
    ) -> dict:
        """
        Create a new Team
        Args:
            name: The name for the team
            user_identifiers: The identifiers of the users which shall be in the team (Optional)
            permission_group_identifiers: The identifiers of the permission groups for to the team (Optional)
            resource_pool_identifiers: The identifiers of the resource pools for the team (Optional)
            organization_identifier: the organization's identifier (a reseller's customer) (Optional)
            visible: Whether the team shall be visible to the organization (Default=True)
        Returns:
            A dict with information about the created team
        """
        post_data = {
            "name": name,
            "visible": visible,
        }

        if user_identifiers is not None:
            post_data["users"] = user_identifiers
        if permission_group_identifiers is not None:
            post_data["permission_groups"] = permission_group_identifiers
        if resource_pool_identifiers is not None:
            post_data["resource_pools"] = resource_pool_identifiers
        if organization_identifier is not None:
            post_data["organization_identifier"] = organization_identifier

        data = self.engine._api_post(f"/core/v1/team.json", post_data=post_data)
        logger.info(f"Created Team {data['name']}: {data['identifier']}")
        return data

    def delete(self, team_identifier: str) -> dict:
        """
        Request the deletion of a Team
        Args:
            team_identifier: The team's identifier
        Returns:
            A dict with some information about the deletion request
        """
        data = self.engine._api_delete(f"/core/v1/team.json/{team_identifier}")
        logger.info(f"Requested deletion of team with identifier {team_identifier}")
        return data
