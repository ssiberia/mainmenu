import logging
from typing import List

from anx_pyengine.engine import AbstractANXEngineAPI

logger = logging.getLogger(__name__)


class EngineResourcePool(AbstractANXEngineAPI):
    def create(
        self,
        name: str,
        resource_identifiers: List[str] = None,
        organization_identifier: str = None,
        visible: bool = True,
    ) -> dict:
        """
        Create a new Resource Pool
        Args:
            name: The name for the resource pool
            resource_identifiers: The identifiers of the resources to contain in the resource pool (Optional)
            organization_identifier: the organization's identifier (a reseller's customer) (Optional)
            visible: Whether the resource pool shall be visible to the organization (Default=True)
        Returns:
            A dict with information about the created resource pool
        """
        post_data = {
            "name": name,
            "visible": visible,
        }

        if resource_identifiers is not None:
            post_data["resources"] = resource_identifiers

        if organization_identifier is not None:
            post_data["organization_identifier"] = organization_identifier

        data = self.engine._api_post(f"/core/v1/resourcepool.json", post_data=post_data)
        logger.info(f"Created Resource Pool {data['name']}: {data['identifier']}")
        return data

    def update(
        self,
        resource_pool_identifier: str,
        name: str = None,
        resource_identifiers_to_assign: List[str] = None,
        resource_identifiers_to_remove: List[str] = None,
        visible: bool = None,
    ):
        """
        Update attributes and contained resources for a resource pool
        Args:
            resource_pool_identifier: the identifier of the resource pool to update
            name: The name of the resource pool
            resource_identifiers_to_assign: resource identifiers to assign to the pool (Optional)
            resource_identifiers_to_remove: resource identifiers to remove from the pool (Optional)
            visible: Whether the Resource pool shall be visible to the organization (Optional)
        Returns:
            A dict containing details of the updated resource pool
        """

        put_data = {}
        if name is not None:
            put_data["name"] = name
        if resource_identifiers_to_assign is not None:
            put_data["resources_to_assign"] = resource_identifiers_to_assign
        if resource_identifiers_to_remove is not None:
            put_data["resources_to_remove"] = resource_identifiers_to_remove
        if visible is not None:
            put_data["visible"] = visible

        data = self.engine._api_put(
            f"/core/v1/resourcepool.json/{resource_pool_identifier}",
            put_data=put_data,
        )
        logger.info(
            f"Updated resource pool {data['name']}, ID {resource_pool_identifier}"
        )
        return data

    def delete(self, resource_pool_identifier: str) -> dict:
        """
        Request the deletion of a Resource Pool
        Args:
            resource_pool_identifier: The resource pool's identifier
        Returns:
            A dict with some information about the deletion request
        """
        data = self.engine._api_delete(
            f"/core/v1/resourcepool.json/{resource_pool_identifier}"
        )
        logger.info(
            f"Requested deletion of resource pool with identifier {resource_pool_identifier}"
        )
        return data
