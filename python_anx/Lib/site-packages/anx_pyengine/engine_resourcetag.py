import asyncio
import logging
from typing import List

from anx_pyengine.engine import AbstractANXEngineAPI
from anx_pyengine.models.resource import Tag

logger = logging.getLogger(__name__)


class EngineResourceTag(AbstractANXEngineAPI):
    def get_tags(self, resource_identifier: str) -> List[Tag]:
        """
        List tags assigned to a resource
        Args:
            resource_identifier: the identifier of the resource
        Returns:
            A list of tags assigned to the resource_identifier
        """
        return asyncio.run(self._async_get_tags(resource_identifier))

    async def _async_get_tags(self, resource_identifier: str) -> List[Tag]:
        data = await self.engine._api_get(
            f"/core/v1/resource.json/{resource_identifier}/tags"
        )
        return [Tag.from_dict(tag) for tag in data]

    def assign(
        self,
        resource_identifier: str,
        tag_name: str,
    ) -> List[Tag]:
        """
        Assign a tag to a resource
        Args:
            resource_identifier: the identifier of the resource to assign the tag to
            tag_name: the name of the tag to assign
        Returns:
            A list of the tags assigned to the resource, including the new assignment
        """

        data = self.engine._api_post(
            f"/core/v1/resource.json/{resource_identifier}/tags/{tag_name}"
        )
        logger.info(f"Assigned resource tag {tag_name} to {resource_identifier}")
        return [Tag.from_dict(tag) for tag in data]

    def remove(
        self,
        resource_identifier: str,
        tag_name: str,
    ) -> List[Tag]:
        """
        Remove a tag from a resource
        Args:
            resource_identifier: the identifier of the resource to remove the tag from
            tag_name: the name of the tag to remove
        Returns:
            A list of the remaining tags assigned to the resource
        """

        data = self.engine._api_delete(
            f"/core/v1/resource.json/{resource_identifier}/tags/{tag_name}"
        )
        logger.info(f"Removed resource tag {tag_name} from {resource_identifier}")
        return [Tag.from_dict(tag) for tag in data]
