Metadata-Version: 2.1
Name: anx-pyengine
Version: 0.4.0
Summary: A python library for the ANEXIA Engine
Home-page: https://code.anexia.com/neteng/anx_pyengine
Author: ANEXIA Internetdienstleistungs GmbH
Author-email: ip-engineering@anexia-it.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown

# anx_pyengine

This package implements python bindings for the Anexia Engine.

It is to no extent feature complete with the engine, the idea is to implement engine API-Calls here instead of having multiple individual scripts.

## Installation via build artefacts
Whenever new commits are added to the repo, a build will be triggered and an installable artefact will be made available on S3.

**To quickly install the latest stable build, use** `pip3 install https://at.s3.anexia-it.com/d35-ne-tooling-de2ad0a3/anx_pyengine/anx_pyengine-latest.tar.gz`.

Other builds are available as follows:

  * specific tagged versions as `anx_pyengine-0.n.n.tar.gz` (ex. [anx_pyengine-0.2.8.tar.gz](https://at.s3.anexia-it.com/d35-ne-tooling-de2ad0a3/anx_pyengine/anx_pyengine-0.2.8.tar.gz))
  * for each branch, the latest commit will be available (ex. [anx_pyengine-NET-1055.tar.gz](https://at.s3.anexia-it.com/d35-ne-tooling-de2ad0a3/anx_pyengine/anx_pyengine-NET-1055.tar.gz))
  


## Installation via ANX private PyPI
Create a [Personal Access Token](https://code.anexia.com/profile/personal_access_tokens) with the `api` privilege.  
Create a `~/.pip/pip.conf` on your device containing the following:
```
[global]
extra-index-url = https://__token__:<your api token>@code.anexia.com/api/v4/projects/69/packages/pypi/simple
```

Finally you can use ` pip install anx-pyengine` to install the package.  
**Attention**: As the project is quickly moving forward be sure to pin your version in order to avoid breaking changes, i.e. by installing via `pip install anx-pyengine=0.0.02`. See the [changelog](changelog.md) for more information on breaking changes

## Usage example

### Create Engine API object

Depending on your needs and permissions, you can access the internal Anexia Engine endpoints
by instantiating an `ANGXEngine` (typical URL: https://engine-internal.anexia-it.com"),
or the public facing endpoints via a `PublicANXEngine` (typical URL: https://engine.anexia-it.com).
If you are a customer of Anexia, or acting on behalf of one, the latter is probably what you need.
Please be aware that they are not interchangeable due to differences in method signatures and models.

```python
from anx_pyengine import ANXEngine

engine = ANXEngine(
    api_url="https://engine-internal.anexia-it.com/api",
    api_key="<YOUR API KEY HERE>",
)
```

### VLAN Creation
Below code will create a VLAN for customer anexia in anx04:

```python
location = engine.location.get(location_code="anx04")
org = engine.organization.search(customer_id=2281007)[0]
v = engine.vlan.create(
    location=location,
    ticket="NETENG-12345",
    description="ANX_TEST",
    customer=org,
    vm_provisioning=True,
)
```

If you are working with a `PublicANXEngine`, there are less parameters available:
```python
location = engine.location.get(location_code="anx04")
v = engine.vlan.create(
    location=location,
    customer_description="ANX Public API Test",
    vm_provisioning=True,
)
```

### DNS Record creation

```python
zone = engine.dns.get_zone("anexia-it.net")

record = engine.dns.create_record(zone, f"anxengine-test", "A", "1.2.3.4")
print(record.current_revision)
```

### Policy assignment

```python
device= engine.device.search('dcr01-test.anx04.vie.at')[0]

policy = engine.policy.search('COMMUNITY')[0]

p = engine.policy.assign(policy, device)
```


## Development
- code is formatted using [black](https://github.com/psf/black). To verify your changes run `black --check anx_pyengine`. Running black without `--check` will cause it to autoformat your code.
- Every function **must** start with a docstring describing the contents and usage following the [google python style guide](https://google.github.io/styleguide/pyguide.html#383-functions-and-methods)
- Every function **must** use `type hints` according to [PEP-484](https://www.python.org/dev/peps/pep-0484/)
- Wherever feasible instances of `dataclass`-objects should be returned in favor of dicts as they offer a lot of comfort.
  - in accordance herewith functions should take instances of `dataclass`-objects instead of i.e. strings representing data. Whilst the latter might be easier for the user it will aid us in the future to have dataclass objects wherever possible

## Creating objects

Objects can be easily created using the `create` functions.
These functions will return a dict containing, amongs others, an `identifier` of the created object.

After creation the object will require some time to be deployed within Anexia and will only be usable thereafter, a object is usable once the `get` functions returns an instance, otherwise it will raise a `HTTPError`.

Once the `get` function returns an object you can start to interact with the object and use it as a reference for the creation of other objects (e.g. after creating a VLAN you need to wait for the `vlan.get` fucntion to return an object bevore you can create a prefix within this VLAN).

Waiting for the object creation can be implemented as follows:

```python
v = engine.vlan.create(.....)
vlan = None
while not vlan:
    try:
        vlan = engine.vlan.get(v["identifier"])
        print("VLAN successfully created")
    except requests.exceptions.HTTPError:
        time.sleep(5)
        pass
```


